{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","addMovie","_useState","useState","_useState2","_slicedToArray","setTitle","_useState3","_useState4","newMovie","setNewMovie","_useState5","_useState6","isErorr","setIsError","_useState7","_useState8","isLoading","setIsLoading","_Fragment","htmlFor","type","id","placeholder","classNames","value","onChange","e","target","disabled","length","onClick","event","query","preventDefault","fetch","concat","then","res","json","catch","Response","Error","data","Poster","Title","Plot","imdbID","finally","some","curr","_toConsumableArray","App","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c90ac86d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={movie.imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {movie.description}\n          <br />\n          <a href={movie.imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import\nReact,\n{\n  Dispatch,\n  SetStateAction,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  movies: Movie[],\n  addMovie: Dispatch<SetStateAction<Movie[]>>,\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie, movies }) => {\n  const [title, setTitle] = useState('');\n  const [newMovie, setNewMovie] = useState<Movie | null>(null);\n  const [isErorr, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  function handleTitleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setIsError(false);\n    setTitle(e.target.value);\n  }\n\n  function findMovie(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    event.preventDefault();\n    setIsLoading(true);\n    setIsError(false);\n\n    getMovie(title)\n      .then((data) => {\n        if ('Error' in data) {\n          setNewMovie(null);\n          setIsError(true);\n        } else {\n          const src = data.Poster === 'N/A'\n            ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n            : data.Poster;\n          const movie = {\n            title: data.Title,\n            description: data.Plot,\n            imgUrl: src,\n            imdbUrl: `https://www.imdb.com/title/${data.imdbID}`,\n            imdbId: data.imdbID,\n          };\n\n          setNewMovie(movie);\n          setIsError(false);\n        }\n      })\n      .finally(() => setIsLoading(false));\n  }\n\n  function add(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    event.preventDefault();\n\n    if (newMovie && !movies.some(movie => movie.imdbId === newMovie.imdbId)) {\n      addMovie((curr: Movie[]) => [...curr, newMovie]);\n    }\n\n    setTitle('');\n    setNewMovie(null);\n  }\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': isErorr,\n              })}\n              value={title}\n              onChange={handleTitleChange}\n            />\n          </div>\n\n          {isErorr && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={title.length === 0}\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {newMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={add}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {!isErorr && newMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={newMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","// import { Movie } from './types/Movie';\nimport { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=a42e44b5';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={setMovies} movies={movies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}